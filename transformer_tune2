from datasets import Dataset
import pandas as pd
from transformers import (
    AutoTokenizer,
    AutoModelForSequenceClassification,
    TrainingArguments,
    Trainer
)
from sklearn.model_selection import train_test_split
import torch

# load pre-trained model and tokenizer
new_model = "bert_trained"
model_name = "bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=5)

# check for CUDA
if torch.cuda.is_available():
    device = torch.device("cuda")
    print(f"CUDA is available. Current device: {torch.cuda.current_device()} - {torch.cuda.get_device_name(0)}")
else:
    device = torch.device("cpu")
    print("CUDA is not available, using CPU instead.")

model.to(device)

# load and prepare dataset
df = pd.read_csv("train.csv")
df['Review'] = df['Review'].astype(str)
df.dropna(subset=['Review', 'overall'], inplace=True)
df['overall'] = df['overall'].astype(int) - 1 

# split the dataset
train_df, test_df = train_test_split(df, test_size=0.3, stratify=df['overall'], random_state=42)
train_dataset = Dataset.from_pandas(train_df)
test_dataset = Dataset.from_pandas(test_df)

# tokenize
def tokenize_function(examples):
    tokenized_inputs = tokenizer(examples['Review'], truncation=True, padding="max_length", max_length=512, return_tensors="pt")
    tokenized_inputs['labels'] = examples['overall']
    return tokenized_inputs

tokenized_train_dataset = train_dataset.map(tokenize_function, batched=True)
tokenized_test_dataset = test_dataset.map(tokenize_function, batched=True)

tokenized_train_dataset.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
tokenized_test_dataset.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    load_best_model_at_end=True,
    evaluation_strategy="epoch",
    save_strategy="epoch"
)

# Initialize and train the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_train_dataset,
    eval_dataset=tokenized_test_dataset,
    tokenizer=tokenizer,
)

# Train the model
trainer.train()
model.save_pretrained(new_model)

# Evaluate the model
results = trainer.evaluate()
print(results)